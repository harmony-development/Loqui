name: Rust

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - '**/*.nix'
      - 'nix/envrc'
      - 'flake.lock'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - '**/*.nix'
      - 'nix/envrc'
      - 'flake.lock'

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short

jobs:
  tagref:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    
    - name: Install tagref
      run: curl -L https://github.com/stepchowfun/tagref/releases/download/v1.5.0/tagref-x86_64-unknown-linux-gnu > tagref && chmod +x tagref
      
    - name: Check tagref
      run: ./tagref && ./tagref list-unused

  check:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    needs: tagref
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install dependencies
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt update -yy
        sudo apt install -yy --no-install-recommends clang libgtk-3-0 libgtk-3-dev protobuf-compiler libpango1.0-0 libpango1.0-dev libglib2.0-0 libglib2.0-dev python3 pkg-config cmake openssl libx11-dev libxcb1-dev libfreetype6 libfreetype6-dev fontconfig libfontconfig-dev expat libcairo2-dev libcairo2 libatk1.0-0 libatk1.0-dev libgdk-pixbuf2.0-0 libgdk-pixbuf2.0-dev libxcb-shape0 libxcb-shape0-dev libxcb-xfixes0 libxcb-xfixes0-dev clang lld unzip
  
    - name: Install rust
      uses: actions-rs/toolchain@v1.0.7
      with:
        toolchain: stable
        default: true
        override: true
        components: rustfmt,clippy

    - name: Cache rust
      uses: Swatinem/rust-cache@v1
      with:
        key: cache-debug

    - name: Clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: 'clippy (${{ matrix.os }})'

  build-web:
    runs-on: ubuntu-latest
    needs: check
    if: github.event_name == 'push'
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Cache rust
      uses: Swatinem/rust-cache@v1
      with:
        key: cache-release-web-1

    - name: Install trunk
      run: cargo install --locked --git "https://github.com/kristoff3r/trunk.git" --branch rust_worker trunk

    - name: Write release cargo config
      run: cat .cargo/.config-release.toml >> .cargo/config.toml

    - name: Build
      run: trunk build --release --public-url "Loqui/"

    - name: Publish web
      if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }}
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: dist/
        publish_branch: gh-pages


  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    needs: check
    if: github.event_name == 'push'
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install dependencies
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt update -yy
        sudo apt install -yy --no-install-recommends clang libgtk-3-0 libgtk-3-dev protobuf-compiler libpango1.0-0 libpango1.0-dev libglib2.0-0 libglib2.0-dev python3 pkg-config cmake openssl libx11-dev libxcb1-dev libfreetype6 libfreetype6-dev fontconfig libfontconfig-dev expat libcairo2-dev libcairo2 libatk1.0-0 libatk1.0-dev libgdk-pixbuf2.0-0 libgdk-pixbuf2.0-dev libxcb-shape0 libxcb-shape0-dev libxcb-xfixes0 libxcb-xfixes0-dev clang lld unzip

    - name: Cache rust
      uses: Swatinem/rust-cache@v1
      with:
        key: cache-release-1

    - name: Build
      run: cargo build --locked --release

    - name: UPX windows
      if: ${{ matrix.os == 'windows-latest' }}
      run: .github/upx.exe target/release/loqui.exe

    - name: UPX linux
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: .github/upx target/release/loqui

    - name: Artifact macOS
      if: ${{ matrix.os == 'macOS-latest' }}
      uses: actions/upload-artifact@v2.3.1
      with:
        name: build-macos
        path: target/release/loqui

    - name: Artifact Linux
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/upload-artifact@v2.3.1
      with:
        name: build-linux
        path: target/release/loqui

    - name: Artifact Windows
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-artifact@v2.3.1
      with:
        name: build-windows
        path: target/release/loqui.exe

  upload-release:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2

    - name: Display structure of downloaded files
      run: ls -R

    - name: Rename artifacts
      run: |
          mv build-windows/loqui.exe build-windows/loqui-windows.exe
          mv build-linux/loqui build-linux/loqui-linux
          mv build-macos/loqui build-macos/loqui-macos
          chmod +x build-{windows,linux,macos}/*

    - name: Upload release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
          chmod +x pyuploadtool-x86_64.AppImage
          ./pyuploadtool-x86_64.AppImage build-windows/loqui-windows.exe build-linux/loqui-linux build-macos/loqui-macos